"use strict";(self.webpackChunk_newtonschool_grauity=self.webpackChunk_newtonschool_grauity||[]).push([[4078],{"./stories/elements/Form/Combobox/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Component:()=>Component,MultipleSelect:()=>MultipleSelect,MultipleSelectWithApplyButton:()=>MultipleSelectWithApplyButton,MultipleSelectWithEmulatedSearch:()=>MultipleSelectWithEmulatedSearch,SingleSelect:()=>SingleSelect,SingleSelectWithApplyButton:()=>SingleSelectWithApplyButton,SingleSelectWithEmulatedSearch:()=>SingleSelectWithEmulatedSearch,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),ui_index__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./ui/index.ts");function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}function _slicedToArray(r,e){return function _arrayWithHoles(r){if(Array.isArray(r))return r}(r)||function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}(r,e)||function _unsupportedIterableToArray(r,a){if(r){if("string"==typeof r)return _arrayLikeToArray(r,a);var t={}.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(r,a):void 0}}(r,e)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(r,a){(null==a||a>r.length)&&(a=r.length);for(var e=0,n=Array(a);e<a;e++)n[e]=r[e];return n}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(e,r,t){return(r=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}const __WEBPACK_DEFAULT_EXPORT__={title:"Elements/Form/Combobox",component:ui_index__WEBPACK_IMPORTED_MODULE_1__.bF};var triggerProps={name:"dropdown",label:"Combobox",placeholder:"Type to search...",isRequired:!1,isDisabled:!1,helpMessage:"",errorMessage:"",color:"brand"},defaultArgs=_objectSpread(_objectSpread({},triggerProps),{},{showHeader:!0,title:"Select",overline:"",subtext:"",customHeader:null,searchPlaceholder:"Search",searchIcon:"search",multiple:!1,items:[{type:ui_index__WEBPACK_IMPORTED_MODULE_1__.cu.SUB_HEADER,title:"LEVELS"},{type:ui_index__WEBPACK_IMPORTED_MODULE_1__.cu.OPTION,label:"Easy",value:"easy",description:"Please write your description here",leftIcon:"check-circle",rightIcon:"check-circle"},{type:ui_index__WEBPACK_IMPORTED_MODULE_1__.cu.OPTION,label:"Medium",value:"medium",description:"Please write your description here",leftIcon:"check-circle"},{type:ui_index__WEBPACK_IMPORTED_MODULE_1__.cu.DIVIDER},{type:ui_index__WEBPACK_IMPORTED_MODULE_1__.cu.OPTION,label:"Hard",value:"hard",leftIcon:"check-circle",rightIcon:"check-circle"},{type:ui_index__WEBPACK_IMPORTED_MODULE_1__.cu.OPTION,label:"Impossible",value:"impossible",description:"Please write your description here",leftIcon:"check-circle",disabled:!0},{type:ui_index__WEBPACK_IMPORTED_MODULE_1__.cu.DIVIDER},{type:ui_index__WEBPACK_IMPORTED_MODULE_1__.cu.SUB_HEADER,title:"OTHERS"},{type:ui_index__WEBPACK_IMPORTED_MODULE_1__.cu.OPTION,label:"Avatar",value:"option1",leftIcon:"check-circle"},{type:ui_index__WEBPACK_IMPORTED_MODULE_1__.cu.OPTION,label:"Avengers: Endgame",value:"option2",leftIcon:"check-circle"},{type:ui_index__WEBPACK_IMPORTED_MODULE_1__.cu.OPTION,label:"Avatar: The Way of Water",value:"option3",leftIcon:"check-circle"},{type:ui_index__WEBPACK_IMPORTED_MODULE_1__.cu.OPTION,label:"Star Wars: The Force Awakens",value:"option4",leftIcon:"check-circle"}],showActionButtons:!1,showClearAllButton:!0,clearAllButtonText:"Clear All",applyButtonText:"Apply",onClearAll:function onClearAll(){},onChange:function onChange(){},onScrollToBottom:function onScrollToBottom(){},className:"",styles:{},value:null,menuProps:{width:"300px",fullWidth:!0}}),Component=function Template(args){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ui_index__WEBPACK_IMPORTED_MODULE_1__.bF,args)}.bind({});Component.args=_objectSpread({},defaultArgs);var ExampleSingleSelectTemplate=function ExampleSingleSelectTemplate(args){var _useState2=_slicedToArray((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(),2),selectedValue=_useState2[0],setSelectedValue=_useState2[1];return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(ui_index__WEBPACK_IMPORTED_MODULE_1__.bF,_extends({},args,{multiple:!1,value:selectedValue,onChange:function onChange(value){return setSelectedValue(value)}})),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("h2",null,"Selected Values"),react__WEBPACK_IMPORTED_MODULE_0__.createElement("ul",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("li",null,(null==selectedValue?void 0:selectedValue.label)||""))))},comboboxOptions=Array.from({length:20},(function(_,i){return{type:ui_index__WEBPACK_IMPORTED_MODULE_1__.cu.OPTION,label:"Option ".concat(i+1," with some really looong text"),value:"option".concat(i+1)}})),singleSelectArgs=_objectSpread(_objectSpread(_objectSpread({},triggerProps),defaultArgs),{},{showHeader:!0,title:"Select",subtext:"Click an option to select",multiple:!1,items:comboboxOptions}),SingleSelect=ExampleSingleSelectTemplate.bind({});SingleSelect.args=_objectSpread({},singleSelectArgs);var SingleSelectWithApplyButton=ExampleSingleSelectTemplate.bind({});SingleSelectWithApplyButton.args=_objectSpread(_objectSpread({},singleSelectArgs),{},{showActionButtons:!0});var ExampleMultiSelectTemplate=function ExampleMultiSelectTemplate(args){var _useState4=_slicedToArray((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]),2),selectedValues=_useState4[0],setSelectedValues=_useState4[1];return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(ui_index__WEBPACK_IMPORTED_MODULE_1__.bF,_extends({},args,{multiple:!0,value:selectedValues,showHeader:!1,onChange:function onChange(value){return setSelectedValues(value)}})),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("h2",null,"Selected Values"),react__WEBPACK_IMPORTED_MODULE_0__.createElement("ul",null,selectedValues.map((function(value){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("li",{key:value.value},value.label)})))))},multipleSelectArgs=_objectSpread(_objectSpread(_objectSpread({},triggerProps),defaultArgs),{},{showHeader:!0,title:"Select",subtext:"Click an option to select",multiple:!0,items:comboboxOptions,value:[]}),MultipleSelect=ExampleMultiSelectTemplate.bind({});MultipleSelect.args=_objectSpread({},multipleSelectArgs);var MultipleSelectWithApplyButton=ExampleMultiSelectTemplate.bind({});MultipleSelectWithApplyButton.args=_objectSpread(_objectSpread({},multipleSelectArgs),{},{showActionButtons:!0});var ExampleTemplateWithEmulatedSearch=function ExampleTemplateWithEmulatedSearch(args){var value=args.value,_useState6=_slicedToArray((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(value),2),selectedValues=_useState6[0],setSelectedValues=_useState6[1],_useState8=_slicedToArray((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(comboboxOptions),2),options=_useState8[0],setOptions=_useState8[1];return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(ui_index__WEBPACK_IMPORTED_MODULE_1__.bF,_extends({},args,{label:"Combobox with emulated search",items:options,value:selectedValues,showHeader:!1,onChange:function onChange(newValue){return setSelectedValues(newValue)},onTextInputChange:function handleTextInputChange(text){if(text){var newOptions=Array.from({length:20},(function(_,i){return{type:ui_index__WEBPACK_IMPORTED_MODULE_1__.cu.OPTION,label:"Searched ".concat(text," ").concat(i+1," with some really looong text"),value:"option".concat(i+1,"-").concat(text)}}));setTimeout((function(){setOptions(newOptions)}),1e3)}else setTimeout((function(){setOptions(comboboxOptions)}),1e3)}})),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("h2",null,"Selected Values"),react__WEBPACK_IMPORTED_MODULE_0__.createElement("ul",null,Array.isArray(selectedValues)?selectedValues.map((function(selectedValue){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("li",{key:selectedValue.value},selectedValue.label)})):(null==selectedValues?void 0:selectedValues.label)||"")))},SingleSelectWithEmulatedSearch=ExampleTemplateWithEmulatedSearch.bind({});SingleSelectWithEmulatedSearch.args=_objectSpread({},singleSelectArgs);var MultipleSelectWithEmulatedSearch=ExampleTemplateWithEmulatedSearch.bind({});MultipleSelectWithEmulatedSearch.args=_objectSpread({},multipleSelectArgs);const __namedExportsOrder=["Component","SingleSelect","SingleSelectWithApplyButton","MultipleSelect","MultipleSelectWithApplyButton","SingleSelectWithEmulatedSearch","MultipleSelectWithEmulatedSearch"];Component.parameters={...Component.parameters,docs:{...Component.parameters?.docs,source:{originalSource:"(args: ComboboxProps) => <NSCombobox {...args} />",...Component.parameters?.docs?.source}}},SingleSelect.parameters={...SingleSelect.parameters,docs:{...SingleSelect.parameters?.docs,source:{originalSource:"(args: ComboboxProps) => {\n  const [selectedValue, setSelectedValue] = useState<NSDropdownMenuBaseItemOptionProps>();\n  return <>\n            <NSCombobox {...args} multiple={false} value={selectedValue} onChange={value => setSelectedValue(value as NSDropdownMenuBaseItemOptionProps)} />\n            <div>\n                <h2>Selected Values</h2>\n                <ul>\n                    <li>{selectedValue?.label || ''}</li>\n                </ul>\n            </div>\n        </>;\n}",...SingleSelect.parameters?.docs?.source}}},SingleSelectWithApplyButton.parameters={...SingleSelectWithApplyButton.parameters,docs:{...SingleSelectWithApplyButton.parameters?.docs,source:{originalSource:"(args: ComboboxProps) => {\n  const [selectedValue, setSelectedValue] = useState<NSDropdownMenuBaseItemOptionProps>();\n  return <>\n            <NSCombobox {...args} multiple={false} value={selectedValue} onChange={value => setSelectedValue(value as NSDropdownMenuBaseItemOptionProps)} />\n            <div>\n                <h2>Selected Values</h2>\n                <ul>\n                    <li>{selectedValue?.label || ''}</li>\n                </ul>\n            </div>\n        </>;\n}",...SingleSelectWithApplyButton.parameters?.docs?.source}}},MultipleSelect.parameters={...MultipleSelect.parameters,docs:{...MultipleSelect.parameters?.docs,source:{originalSource:"(args: ComboboxProps) => {\n  const [selectedValues, setSelectedValues] = useState<NSDropdownMenuBaseItemOptionProps[]>([]);\n  return <>\n            <NSCombobox {...args} multiple value={selectedValues} showHeader={false} onChange={value => setSelectedValues(value as NSDropdownMenuBaseItemOptionProps[])} />\n            <div>\n                <h2>Selected Values</h2>\n                <ul>\n                    {selectedValues.map(value => <li key={value.value}>{value.label}</li>)}\n                </ul>\n            </div>\n        </>;\n}",...MultipleSelect.parameters?.docs?.source}}},MultipleSelectWithApplyButton.parameters={...MultipleSelectWithApplyButton.parameters,docs:{...MultipleSelectWithApplyButton.parameters?.docs,source:{originalSource:"(args: ComboboxProps) => {\n  const [selectedValues, setSelectedValues] = useState<NSDropdownMenuBaseItemOptionProps[]>([]);\n  return <>\n            <NSCombobox {...args} multiple value={selectedValues} showHeader={false} onChange={value => setSelectedValues(value as NSDropdownMenuBaseItemOptionProps[])} />\n            <div>\n                <h2>Selected Values</h2>\n                <ul>\n                    {selectedValues.map(value => <li key={value.value}>{value.label}</li>)}\n                </ul>\n            </div>\n        </>;\n}",...MultipleSelectWithApplyButton.parameters?.docs?.source}}},SingleSelectWithEmulatedSearch.parameters={...SingleSelectWithEmulatedSearch.parameters,docs:{...SingleSelectWithEmulatedSearch.parameters?.docs,source:{originalSource:"(args: ComboboxProps) => {\n  const {\n    value\n  } = args;\n  const [selectedValues, setSelectedValues] = useState<NSDropdownMenuBaseItemOptionProps | NSDropdownMenuBaseItemOptionProps[]>(value);\n  const [options, setOptions] = useState<BaseItemProps[]>(comboboxOptions);\n  const handleTextInputChange = (text: string) => {\n    if (!text) {\n      setTimeout(() => {\n        setOptions(comboboxOptions);\n      }, 1000);\n      return;\n    }\n    const newOptions = Array.from({\n      length: 20\n    }, (_, i) => ({\n      type: NSDropdownMenuBaseItemType.OPTION,\n      label: `Searched ${text} ${i + 1} with some really looong text`,\n      value: `option${i + 1}-${text}`\n    })) as BaseItemProps[];\n    setTimeout(() => {\n      setOptions(newOptions);\n    }, 1000);\n  };\n  return <>\n            <NSCombobox {...args} label=\"Combobox with emulated search\" items={options} value={selectedValues} showHeader={false} onChange={newValue => setSelectedValues(newValue as NSDropdownMenuBaseItemOptionProps[])} onTextInputChange={handleTextInputChange} />\n            <div>\n                <h2>Selected Values</h2>\n                <ul>\n                    {Array.isArray(selectedValues) ? selectedValues.map(selectedValue => <li key={selectedValue.value}>\n                                {selectedValue.label}\n                            </li>) : selectedValues?.label || ''}\n                </ul>\n            </div>\n        </>;\n}",...SingleSelectWithEmulatedSearch.parameters?.docs?.source}}},MultipleSelectWithEmulatedSearch.parameters={...MultipleSelectWithEmulatedSearch.parameters,docs:{...MultipleSelectWithEmulatedSearch.parameters?.docs,source:{originalSource:"(args: ComboboxProps) => {\n  const {\n    value\n  } = args;\n  const [selectedValues, setSelectedValues] = useState<NSDropdownMenuBaseItemOptionProps | NSDropdownMenuBaseItemOptionProps[]>(value);\n  const [options, setOptions] = useState<BaseItemProps[]>(comboboxOptions);\n  const handleTextInputChange = (text: string) => {\n    if (!text) {\n      setTimeout(() => {\n        setOptions(comboboxOptions);\n      }, 1000);\n      return;\n    }\n    const newOptions = Array.from({\n      length: 20\n    }, (_, i) => ({\n      type: NSDropdownMenuBaseItemType.OPTION,\n      label: `Searched ${text} ${i + 1} with some really looong text`,\n      value: `option${i + 1}-${text}`\n    })) as BaseItemProps[];\n    setTimeout(() => {\n      setOptions(newOptions);\n    }, 1000);\n  };\n  return <>\n            <NSCombobox {...args} label=\"Combobox with emulated search\" items={options} value={selectedValues} showHeader={false} onChange={newValue => setSelectedValues(newValue as NSDropdownMenuBaseItemOptionProps[])} onTextInputChange={handleTextInputChange} />\n            <div>\n                <h2>Selected Values</h2>\n                <ul>\n                    {Array.isArray(selectedValues) ? selectedValues.map(selectedValue => <li key={selectedValue.value}>\n                                {selectedValue.label}\n                            </li>) : selectedValues?.label || ''}\n                </ul>\n            </div>\n        </>;\n}",...MultipleSelectWithEmulatedSearch.parameters?.docs?.source}}}}}]);